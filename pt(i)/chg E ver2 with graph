import random
import time
from statistics import mean
import matplotlib.pyplot as plt

def extract_min(Q, dist):
    # Find the vertex with the minimum distance in the priority queue Q
    min_dist = float('inf')
    min_vertex = None
    for vertex in Q:
        if dist[vertex] < min_dist:
            min_dist = dist[vertex]
            min_vertex = vertex
    return min_vertex

def dijkstra_shortest_path(adj_matrix, source):
    num_nodes = len(adj_matrix)
    d = {}
    pi = {}
    S = []
    # Initialize data structures
    for i in range(num_nodes):
        d[i] = float('inf')
        pi[i] = None
        S.append(0)
    # Set the distance from the source to itself as 0
    d[source] = 0
    pi[source] = source

    # Priority queue to keep track of vertices
    sorted_d = dict(sorted(d.items(), key=lambda item: item[1]))
    Q = list(sorted_d.keys())
    # print("Q is ", Q)


    while Q:
        # Extract the vertex with the smallest distance
        u = extract_min(Q, d)
       # print("u is ", u)
        if u is None:
            break
        Q.remove(u)

        # Mark u as part of set S
        S[u] = 1

        # Iterate over all vertices adjacent to u
        for v in range(num_nodes):
            if S[v] == 0 and d[v] > d[u] + adj_matrix[u][v] and adj_matrix[u][v] != 0:
                # Update distance, predecessor, and continue with the next vertex
                # print("v is ", v, "adj_matrix[u][v] is ", adj_matrix[u][v], "d[u] + adj_matrix[u][v] is ", d[u] + adj_matrix[u][v])
                d[v] = d[u] + adj_matrix[u][v]
                pi[v] = u
                # print("d is ", d, ", pi is ", pi)
                sorted_d = dict(sorted(d.items(), key=lambda item: item[1]))
                Q = list(sorted_d.keys())

    d_list = list(d.values())
    pi_list = list(pi.values())

    return d_list, pi_list


run_num = 1
timeList = []
time_to_calculate_mean = []


graph = []
V = 15

for i in range(V):
    graph.append([])
    for j in range(V):
        graph[i].append(0)


edge = 1
max_edge = V*(V-1)
timeList = []  # List to store the mean times
edgesList = []  # List to store the number of edges

while True:
    if edge > max_edge:
        break
    for i in range(50):
        edge_current = 0
        while edge_current < edge:
            A = random.randint(0, V-1)
            B = random.randint(0, V-1)
            if A == B or graph[A][B] != 0:
                continue
            else:
                graph[A][B] = random.randint(1, 20)
                edge_current += 1
        source_node = 0
        start = time.time()
        shortest_distances, predecessors = dijkstra_shortest_path(graph, source_node)
        end = time.time()
        time_taken = end - start
        time_to_calculate_mean.append(time_taken)
        for a in range(V):
            for j in range(V):
                graph[a][j] = 0
    timeList.append(mean(time_to_calculate_mean))
    edgesList.append(edge)
    edge += 1

# Plot the graph
plt.plot(edgesList, timeList)
plt.xlabel("Number of Edges")
plt.ylabel("Mean Time Taken (seconds)")
plt.title("Time Taken vs Number of Edges")
plt.grid()
plt.show()
